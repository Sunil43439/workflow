AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: 'default'

  MySubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs]

  MyDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'MyTable'
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'MyFunction'
      Handler: 'index.handler'
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Code:
        S3Bucket: 'my-bucket'
        S3Key: 'lambda-code.zip'
      Runtime: 'nodejs14.x'
      Environment:
        Variables:
          TABLE_NAME: !Ref MyDynamoDBTable

  MyLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'lambda-dynamodb-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:*'
                Resource: !GetAtt MyDynamoDBTable.Arn

  MyApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'MyApi'

  MyRDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: 'mydbinstance'
      AllocatedStorage: '20'
      DBInstanceClass: 'db.t2.micro'
      Engine: 'postgres'
      EngineVersion: '12.3'
      MasterUsername: 'admin'
      MasterUserPassword: 'password'
      DBName: 'mydatabase'
      VPCSecurityGroups:
        - 'sg-12345678'
      DBSubnetGroupName:
        Ref: MyDBSubnetGroup

  MyDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'Subnet group for RDS instance'
      SubnetIds:
        - Ref: MySubnet

  MySNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: 'MyTopic'

  MySQSQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: 'MyQueue'

  MyHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: 'example.com.'

  MyRecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: 'example.com.'
      Name: 'api.example.com.'
      Type: 'A'
      AliasTarget:
        HostedZoneId: !GetAtt MyHostedZone.HostedZoneId
        DNSName: !GetAtt MyApiGateway.Endpoint

Outputs:
  VpcId:
    Description: 'VPC ID'
    Value: !Ref MyVpc
  DynamoDBTableName:
    Description: 'DynamoDB Table Name'
    Value: !Ref MyDynamoDBTable
  LambdaFunctionName:
    Description: 'Lambda Function Name'
    Value: !Ref MyLambdaFunction
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !GetAtt MyApiGateway.RootResourceId
  RDSInstanceEndpoint:
    Description: 'RDS Instance Endpoint'
    Value: !GetAtt MyRDSInstance.Endpoint.Address
  SNSTopicArn:
    Description: 'SNS Topic ARN'
    Value: !Ref MySNSTopic
  SQSQueueUrl:
    Description: 'SQS Queue URL'
    Value: !GetAtt MySQSQueue.QueueUrl
